{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Todo-list\\\\todo-list\\\\src\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getTasks = () => {\n  const tasks = localStorage.getItem(\"tasks\");\n  return tasks ? JSON.parse(tasks) : [];\n};\n\nconst AppContext = /*#__PURE__*/React.createContext(null);\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const inputRef = useRef(null);\n  const [tasks, setTasks] = useState(getTasks());\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [filter, setFilter] = useState(\"all\");\n  const refContainer = useRef(null);\n\n  const removeTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleDone = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completed: !task.completed\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      tasks,\n      setTasks,\n      removeTask,\n      toggleDone,\n      isEditing,\n      setIsEditing,\n      editId,\n      setEditId,\n      name,\n      setName,\n      filter,\n      setFilter,\n      inputRef\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppProvider, \"tLaOF6Atb8nJWEErj/8q3Eme8VU=\");\n\n_c = AppProvider;\n\nconst useAppContext = () => {\n  _s2();\n\n  // Переименование функции в useAppContext\n  return useContext(AppContext);\n};\n\n_s2(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider, useAppContext }; // Обновление экспорта функции\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["C:/Users/HOME/Todo-list/todo-list/src/context.js"],"names":["React","useState","useContext","useRef","getTasks","tasks","localStorage","getItem","JSON","parse","AppContext","createContext","AppProvider","children","inputRef","setTasks","isEditing","setIsEditing","editId","setEditId","name","setName","filter","setFilter","refContainer","removeTask","id","task","toggleDone","map","completed","useAppContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,MAAtC,QAAoD,OAApD;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,SAAOF,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAH,GAAuB,EAAnC;AACD,CAHD;;AAKA,MAAMK,UAAU,gBAAGV,KAAK,CAACW,aAAN,CAAoB,IAApB,CAAnB;;AAEA,MAAMC,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACpC,QAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACE,KAAD,EAAQU,QAAR,IAAoBd,QAAQ,CAACG,QAAQ,EAAT,CAAlC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACqB,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMuB,YAAY,GAAGrB,MAAM,CAAC,IAAD,CAA3B;;AAEA,QAAMsB,UAAU,GAAIC,EAAD,IAAQ;AACzBX,IAAAA,QAAQ,CAACV,KAAK,CAACiB,MAAN,CAAcK,IAAD,IAAUA,IAAI,CAACD,EAAL,KAAYA,EAAnC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAME,UAAU,GAAIF,EAAD,IAAQ;AACzBX,IAAAA,QAAQ,CACNV,KAAK,CAACwB,GAAN,CAAWF,IAAD,IACRA,IAAI,CAACD,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGC,IAAL;AAAWG,MAAAA,SAAS,EAAE,CAACH,IAAI,CAACG;AAA5B,KAAjB,GAA2DH,IAD7D,CADM,CAAR;AAKD,GAND;;AAQA,sBACE,QAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLtB,MAAAA,KADK;AAELU,MAAAA,QAFK;AAGLU,MAAAA,UAHK;AAILG,MAAAA,UAJK;AAKLZ,MAAAA,SALK;AAMLC,MAAAA,YANK;AAOLC,MAAAA,MAPK;AAQLC,MAAAA,SARK;AASLC,MAAAA,IATK;AAULC,MAAAA,OAVK;AAWLC,MAAAA,MAXK;AAYLC,MAAAA,SAZK;AAaLT,MAAAA;AAbK,KADT;AAAA,cAiBGD;AAjBH;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA1CD;;GAAMD,W;;KAAAA,W;;AA4CN,MAAMmB,aAAa,GAAG,MAAM;AAAA;;AAAE;AAC5B,SAAO7B,UAAU,CAACQ,UAAD,CAAjB;AACD,CAFD;;IAAMqB,a;;AAIN,SAASrB,UAAT,EAAqBE,WAArB,EAAkCmB,aAAlC,G,CAAmD","sourcesContent":["import React, { useState, useContext, useRef } from \"react\";\n\nconst getTasks = () => {\n  const tasks = localStorage.getItem(\"tasks\");\n  return tasks ? JSON.parse(tasks) : [];\n};\n\nconst AppContext = React.createContext(null);\n\nconst AppProvider = ({ children }) => {\n  const inputRef = useRef(null);\n  const [tasks, setTasks] = useState(getTasks());\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [filter, setFilter] = useState(\"all\");\n  const refContainer = useRef(null);\n\n  const removeTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleDone = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        tasks,\n        setTasks,\n        removeTask,\n        toggleDone,\n        isEditing,\n        setIsEditing,\n        editId,\n        setEditId,\n        name,\n        setName,\n        filter,\n        setFilter,\n        inputRef\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nconst useAppContext = () => { // Переименование функции в useAppContext\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider, useAppContext }; // Обновление экспорта функции\n"]},"metadata":{},"sourceType":"module"}