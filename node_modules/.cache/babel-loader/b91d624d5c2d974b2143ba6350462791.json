{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HOME\\\\Todo-list\\\\todo-list\\\\src\\\\context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getTasks = () => {\n  const tasks = localStorage.getItem(\"tasks\");\n  return tasks ? JSON.parse(tasks) : [];\n};\n\nconst AppContext = /*#__PURE__*/React.createContext(null);\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const inputRef = useRef(null);\n  const [tasks, setTasks] = useState(getTasks());\n  const [alert, setAlert] = useState({\n    show: false,\n    msg: \"\"\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [filter, setFilter] = useState(\"all\");\n  const [isColorsOpen, setIsColorsOpen] = useState(false);\n  const [location, setLocation] = useState({});\n  const refContainer = useRef(null);\n\n  const removeTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n    showAlert(true, \"Removed.\");\n  };\n\n  const toggleDone = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      completed: !task.completed\n    } : task));\n    showAlert(true, \"Task Changed.\");\n  };\n\n  const editTask = id => {\n    const {\n      name\n    } = tasks.find(task => task.id === id);\n    setIsEditing(true);\n    setEditId(id);\n    setName(name);\n    inputRef.current.focus();\n  };\n\n  const showAlert = (show, msg) => {\n    setAlert({\n      show,\n      msg\n    });\n  };\n\n  const showColors = (e, id) => {\n    const {\n      top,\n      right\n    } = e.target.getBoundingClientRect();\n    setLocation({\n      top,\n      right,\n      id\n    });\n    setIsColorsOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      tasks,\n      setTasks,\n      removeTask,\n      toggleDone,\n      refContainer,\n      alert,\n      showAlert,\n      isEditing,\n      setIsEditing,\n      editId,\n      setEditId,\n      editTask,\n      name,\n      setName,\n      getTasks,\n      filter,\n      setFilter,\n      inputRef,\n      location,\n      setLocation,\n      isColorsOpen,\n      setIsColorsOpen,\n      showColors\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppProvider, \"ZMhMFUdra/E1kD93Dxe+JUFIoq0=\");\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["C:/Users/HOME/Todo-list/todo-list/src/context.js"],"names":["React","useState","useContext","useRef","getTasks","tasks","localStorage","getItem","JSON","parse","AppContext","createContext","AppProvider","children","inputRef","setTasks","alert","setAlert","show","msg","isEditing","setIsEditing","editId","setEditId","name","setName","filter","setFilter","isColorsOpen","setIsColorsOpen","location","setLocation","refContainer","removeTask","id","task","showAlert","toggleDone","map","completed","editTask","find","current","focus","showColors","e","top","right","target","getBoundingClientRect","useGlobalContext"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useRef } from \"react\";\n\nconst getTasks = () => {\n  const tasks = localStorage.getItem(\"tasks\");\n  return tasks ? JSON.parse(tasks) : [];\n};\nconst AppContext = React.createContext(null);\nconst AppProvider = ({ children }) => {\n  const inputRef = useRef(null);\n  const [tasks, setTasks] = useState(getTasks());\n  const [alert, setAlert] = useState({ show: false, msg: \"\" });\n  const [isEditing, setIsEditing] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [filter, setFilter] = useState(\"all\");\n  const [isColorsOpen, setIsColorsOpen] = useState(false);\n  const [location, setLocation] = useState({});\n  const refContainer = useRef(null);\n\n  const removeTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n    showAlert(true, \"Removed.\");\n  };\n\n  const toggleDone = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n    showAlert(true, \"Task Changed.\");\n  };\n\n  const editTask = (id) => {\n    const { name } = tasks.find((task) => task.id === id);\n    setIsEditing(true);\n    setEditId(id);\n    setName(name);\n    inputRef.current.focus();\n  };\n\n  const showAlert = (show, msg) => {\n    setAlert({ show, msg });\n  };\n\n  const showColors = (e, id) => {\n    const { top, right } = e.target.getBoundingClientRect();\n    setLocation({ top, right, id });\n    setIsColorsOpen(true);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        tasks,\n        setTasks,\n        removeTask,\n        toggleDone,\n        refContainer,\n        alert,\n        showAlert,\n        isEditing,\n        setIsEditing,\n        editId,\n        setEditId,\n        editTask,\n        name,\n        setName,\n        getTasks,\n        filter,\n        setFilter,\n        inputRef,\n        location,\n        setLocation,\n        isColorsOpen,\n        setIsColorsOpen,\n        showColors,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nconst useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider, useGlobalContext };\n"]},"metadata":{},"sourceType":"module"}